#!/usr/bin/env escript

-mode(compile).

main([File]) ->
    case filelib:is_regular(File) of
        false ->
            usage(),
            halt(1);
        _ -> ok
    end,
    {ok, Bin} = file:read_file(File),
    ok = process(Bin);
main([]) ->
    application:ensure_all_started(ssl),
    inets:start(),
    Url = "https://www.unicode.org/Public/security/latest/confusables.txt",
    {ok, {{_, 200, _}, _Headers, Body}} = httpc:request(Url),
    Bin = iolist_to_binary(Body),
    ok = process(Bin).

usage() ->
    io:format("Usage: ./generate [/path/to/confusables.txt]").

process(Bin0) ->
    {utf8, Len} = unicode:bom_to_encoding(Bin0),
    Bin = binary:part(Bin0, Len, size(Bin0) - Len),
    Lines = binary:split(Bin, <<"\n">>, [global]),
    Lines2 = lists:filter(fun is_not_comment_or_empty/1, Lines),
    Clauses = [make_clause(L) || L <- Lines2],
    LastClause = "p(C) -> C.\n",
    OutBin = iolist_to_binary([preamble(), Clauses, LastClause]),
    file:write_file("src/tr39.erl", OutBin),
    ok.

is_not_comment_or_empty(<<>>) -> false;
is_not_comment_or_empty(<<"#", _Rest/binary>>) -> false;
is_not_comment_or_empty(_) -> true.

make_clause(Line) ->
    [C1, Bin] = binary:split(Line, <<";">>),
    [C2, _] = binary:split(Bin, <<";">>),
    C1B16 = base16lits(C1),
    C2B16 = base16lits(C2),
    io_lib:format("p(~s) -> ~s;~n", [C1B16, C2B16]).

base16lits(Codes) ->
    Split = binary:split(Codes, [<<" ">>, <<"\t">>], [global, trim_all]),
    Bins = [<<"16#", C/binary>> || C <- Split],
    case length(Bins) of
        1 -> Bins;
        _ -> [$[, lists:join(",", Bins), $]]
    end.

preamble() ->
"-module(tr39).
-export([skeleton/1, confusable/2]).

confusable(S1, S2) ->
    skeleton(S1) =:= skeleton(S2).

skeleton(S) ->
    NFD = unicode:characters_to_nfd_list(S),
    Prototypes = [p(Char) || Char <- NFD],
    unicode:characters_to_nfd_list(Prototypes).

%% the rest of this file is automatically generated.

".
